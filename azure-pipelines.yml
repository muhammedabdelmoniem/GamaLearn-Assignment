trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'windows-latest'

steps:
  # Step 1: Checkout the code from the Git repository
  - checkout: self

  # Step 2: Set up .NET Core SDK
  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      version: '6.x' # You can specify the version based on the project needs
      installationPath: $(Agent.ToolsDirectory)/dotnet

  # Step 3: Restore the dependencies
  - task: DotNetCoreCLI@2
    inputs:
      command: 'restore'
      projects: '**/*.csproj'  # This will target the csproj files you uploaded

  # Step 4: Build the application using MSBuild
  - task: VSBuild@1
    inputs:
      solution: '**/*.sln'  # Assuming a solution file is present, otherwise target the csproj file
      msbuildArgs: '/p:Configuration=Release'
      clean: true

  # Step 5: Run Unit Tests
  - task: DotNetCoreCLI@2
    inputs:
      command: 'test'
      projects: '**/*Tests.csproj'  # This targets the test projects, update the path if needed

  # Step 6: SonarQube - Prepare for SonarQube analysis
  - task: SonarQubePrepare@4
    inputs:
      SonarQube: 'Your_SonarQube_Service_Connection'
      projectKey: 'TestApp'
      projectName: 'TestApp'
  
  # Step 7: SonarQube - Run analysis
  - task: SonarQubeAnalyze@4

  # Step 8: SonarQube - Publish the results
  - task: SonarQubePublish@4
    inputs:
      pollingTimeoutSec: '300'

  # Step 9: Publish build artifacts for deployment
  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: 'drop'
      publishLocation: 'Container'

  # Step 10: Deploy the application to Azure App Service
  - task: AzureWebApp@1
    inputs:
      azureSubscription: 'Your_Azure_Subscription'
      appName: 'Your_App_Service_Name'
      package: '$(System.DefaultWorkingDirectory)/**/*.zip'

  # Step 11: Optional - Monitor the deployment using Application Insights
  # Ensure Application Insights SDK is included in your application configuration